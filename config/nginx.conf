# QFLARE Nginx Production Configuration
events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log;

    # Performance
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

    # Upstream servers
    upstream qflare_backend {
        server qflare-server:8000;
    }

    upstream redis_ui {
        server redis-commander:8081;
    }

    # Main QFLARE server (HTTP only for development)
    server {
        listen 80;
        server_name _;

        # SSL configuration (you'll need to add certificates)
        # ssl_certificate /etc/nginx/ssl/qflare.crt;
        # ssl_certificate_key /etc/nginx/ssl/qflare.key;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;

        # For development/testing without SSL - commented out
        # ssl off;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Root location
        location / {
            proxy_pass http://qflare_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Rate limiting for main app
            limit_req zone=api burst=20 nodelay;
        }

        # API endpoints with stricter rate limiting
        location /api/ {
            proxy_pass http://qflare_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Stricter rate limiting for API
            limit_req zone=auth burst=10 nodelay;
        }

        # Health check endpoint
        location /health {
            proxy_pass http://qflare_backend;
            access_log off;
        }

        # Static files caching
        location /static/ {
            proxy_pass http://qflare_backend;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # Redis Commander UI
    server {
        listen 8081;
        server_name redis.localhost;

        location / {
            proxy_pass http://redis_ui;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}