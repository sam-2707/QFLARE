# QFLARE Production Deployment
# Complete federated learning platform with TEE security

version: '3.8'

networks:
  qflare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  qflare-certs:
    driver: local
  qflare-data:
    driver: local
  qflare-logs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # Database Services
  postgres:
    image: postgres:15-alpine
    container_name: qflare-postgres
    environment:
      POSTGRES_DB: qflare_db
      POSTGRES_USER: qflare
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - qflare-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qflare -d qflare_db"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: qflare-redis
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - qflare-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Certificate Management
  cert-manager:
    image: qflare/cert-manager:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.cert-manager
    container_name: qflare-cert-manager
    volumes:
      - qflare-certs:/certs
    environment:
      - CERT_VALIDITY_DAYS=365
      - CA_KEY_SIZE=4096
      - SERVER_KEY_SIZE=2048
    networks:
      - qflare-network
    restart: "no"

  # QFLARE Server
  qflare-server:
    image: qflare/server:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.server
      target: production
    container_name: qflare-server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      cert-manager:
        condition: service_completed_successfully
    environment:
      - DATABASE_URL=postgresql://qflare:${POSTGRES_PASSWORD}@postgres:5432/qflare_db
      - REDIS_URL=redis://redis:6379/0
      - QFLARE_JWT_SECRET=${QFLARE_JWT_SECRET}
      - QFLARE_LOG_LEVEL=INFO
      - QFLARE_SGX_MODE=HW
      - SGX_SPID=${SGX_SPID}
      - SGX_IAS_KEY=${SGX_IAS_KEY}
      - SEV_ATTESTATION_SERVER=${SEV_ATTESTATION_SERVER}
    volumes:
      - qflare-certs:/app/certs:ro
      - qflare-data:/app/data
      - qflare-logs:/app/logs
      - /dev/sgx_enclave:/dev/sgx_enclave
      - /dev/sgx_provision:/dev/sgx_provision
    devices:
      - /dev/sgx_enclave
      - /dev/sgx_provision
    networks:
      - qflare-network
    ports:
      - "8000:8000"   # HTTP
      - "8443:8443"   # HTTPS
      - "9090:9090"   # Metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID

  # Edge Node (Example)
  qflare-edge-1:
    image: qflare/edge:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.edge
      target: production
    container_name: qflare-edge-1
    depends_on:
      qflare-server:
        condition: service_healthy
    environment:
      - QFLARE_DEVICE_ID=edge-node-001
      - QFLARE_DEVICE_TYPE=edge
      - QFLARE_SERVER_URL=https://qflare-server:8443
      - QFLARE_LOG_LEVEL=INFO
    volumes:
      - qflare-certs:/app/certs:ro
      - ./docker/edge-data-1:/app/data
      - ./docker/edge-logs-1:/app/logs
    networks:
      - qflare-network
    ports:
      - "8001:8001"
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: qflare-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./docker/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    networks:
      - qflare-network
    ports:
      - "9091:9090"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: qflare-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - qflare-network
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped

  # Log Management
  loki:
    image: grafana/loki:latest
    container_name: qflare-loki
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./docker/loki/config.yaml:/etc/loki/local-config.yaml:ro
    networks:
      - qflare-network
    ports:
      - "3100:3100"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:latest
    container_name: qflare-promtail
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./docker/promtail/config.yml:/etc/promtail/config.yml:ro
      - qflare-logs:/var/log/qflare:ro
      - /var/log:/var/log/host:ro
    networks:
      - qflare-network
    depends_on:
      - loki
    restart: unless-stopped

  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: qflare-nginx
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - qflare-certs:/etc/nginx/certs:ro
    networks:
      - qflare-network
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - qflare-server
    restart: unless-stopped

  # Backup Service
  backup:
    image: qflare/backup:latest
    build:
      context: .
      dockerfile: docker/Dockerfile.backup
    container_name: qflare-backup
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - POSTGRES_URL=postgresql://qflare:${POSTGRES_PASSWORD}@postgres:5432/qflare_db
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - qflare-data:/app/data:ro
      - qflare-logs:/app/logs:ro
      - ./docker/backups:/backups
    networks:
      - qflare-network
    depends_on:
      - postgres
      - qflare-server
    restart: unless-stopped