version: '3.8'

services:
  # Main QFLARE Core Server
  qflare-server:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: qflare-core
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///data/qflare_prod.db
      - REDIS_URL=redis://redis:6379/0
      - QFLARE_JWT_SECRET=${QFLARE_JWT_SECRET:-prod-secret-key-change-in-env}
      - QFLARE_SGX_MODE=SIM
      - QFLARE_LOG_LEVEL=INFO
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - qflare_data:/app/data
      - qflare_logs:/app/logs
    networks:
      - qflare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: qflare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    networks:
      - qflare-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server /etc/redis/redis.conf

  # Redis Commander (Web UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: qflare-redis-ui
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - qflare-network
    restart: unless-stopped

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: qflare-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - qflare-server
    networks:
      - qflare-network
    restart: unless-stopped

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: qflare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - qflare-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: qflare-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - qflare-network
    restart: unless-stopped

volumes:
  qflare_data:
    driver: local
  qflare_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  qflare-network:
    driver: bridge