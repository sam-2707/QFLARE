# Kubernetes namespace
apiVersion: v1
kind: Namespace
metadata:
  name: qflare-production
  labels:
    name: qflare-production
---
# PostgreSQL Database
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: qflare-production
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: qflare_prod
        - name: POSTGRES_USER
          value: qflare
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: qflare-production
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Redis Cache
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: qflare-production
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        command: ["redis-server"]
        args: ["--appendonly", "yes", "--requirepass", "$(REDIS_PASSWORD)"]
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: qflare-production
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379
  type: ClusterIP
---
# QFLARE API Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qflare-api
  namespace: qflare-production
spec:
  replicas: 3
  selector:
    matchLabels:
      app: qflare-api
  template:
    metadata:
      labels:
        app: qflare-api
    spec:
      containers:
      - name: qflare-api
        image: qflare/api:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: qflare-secret
              key: database-url
        - name: REDIS_URL
          value: "redis://redis:6379"
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: qflare-secret
              key: secret-key
        - name: ENVIRONMENT
          value: "production"
        livenessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
---
apiVersion: v1
kind: Service
metadata:
  name: qflare-api
  namespace: qflare-production
spec:
  selector:
    app: qflare-api
  ports:
  - port: 8000
    targetPort: 8000
  type: ClusterIP
---
# QFLARE Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qflare-frontend
  namespace: qflare-production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: qflare-frontend
  template:
    metadata:
      labels:
        app: qflare-frontend
    spec:
      containers:
      - name: qflare-frontend
        image: qflare/frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: qflare-frontend
  namespace: qflare-production
spec:
  selector:
    app: qflare-frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qflare-ingress
  namespace: qflare-production
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - qflare.company.com
    secretName: qflare-tls
  rules:
  - host: qflare.company.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: qflare-api
            port:
              number: 8000
      - path: /
        pathType: Prefix
        backend:
          service:
            name: qflare-frontend
            port:
              number: 80
---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: qflare-api-hpa
  namespace: qflare-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: qflare-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80