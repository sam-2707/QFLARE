"""
Simple Enhanced Security Validation for QFLARE

This script validates the enhanced security implementation.
"""

import sys
import os

# Add server directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'server'))

# Set environment variable to use mock implementation
os.environ['QFLARE_USE_MOCK_CRYPTO'] = 'true'

def test_security_imports():
    """Test that all security modules can be imported."""
    print("Testing security module imports...")
    
    try:
        from server.security.key_management import PostQuantumKeyManager, KeyType
        print("‚úÖ Key management module imported")
        
        from server.security.secure_communication import SecureCommunicationManager, MessageType
        print("‚úÖ Secure communication module imported")
        
        from server.security.authentication import EnhancedAuthenticationManager, AuthenticationMethod
        print("‚úÖ Authentication module imported")
        
        from server.security import QFLARESecurityManager
        print("‚úÖ Integrated security manager imported")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Import failed: {e}")
        return False

def test_basic_functionality():
    """Test basic security functionality."""
    print("\nTesting basic security functionality...")
    
    try:
        from server.security import QFLARESecurityManager
        
        # Initialize security manager
        security_manager = QFLARESecurityManager()
        print("‚úÖ Security manager initialized")
        
        # Test device initialization
        device_id = "test_device_001"
        device_info = {'device_type': 'edge_node'}
        
        credentials = security_manager.initialize_device_security(device_id, device_info)
        if credentials:
            print("‚úÖ Device security initialization successful")
        else:
            print("‚ùå Device security initialization failed")
            return False
        
        # Test session establishment
        session_id, handshake = security_manager.establish_secure_session(device_id)
        if session_id and handshake:
            print("‚úÖ Secure session establishment successful")
        else:
            print("‚ùå Secure session establishment failed")
            return False
        
        # Test authentication
        from server.security.authentication import AuthenticationMethod
        auth_data = {'token': security_manager.auth_manager.generate_access_token(device_id)}
        auth_context = security_manager.authenticate_request(
            device_id, 
            auth_data, 
            AuthenticationMethod.JWT_TOKEN
        )
        
        if auth_context and auth_context.authenticated:
            print("‚úÖ Authentication successful")
        else:
            print("‚ùå Authentication failed")
            return False
        
        # Test security status
        status = security_manager.get_security_status()
        if status:
            print("‚úÖ Security status reporting successful")
        else:
            print("‚ùå Security status reporting failed")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Basic functionality test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run security validation."""
    print("üîê QFLARE Enhanced Security Validation")
    print("=" * 45)
    
    # Test imports
    imports_ok = test_security_imports()
    
    # Test basic functionality
    if imports_ok:
        functionality_ok = test_basic_functionality()
    else:
        functionality_ok = False
    
    # Summary
    print("\n" + "=" * 45)
    print("Security Validation Results:")
    print("=" * 45)
    print(f"Module Imports:        {'‚úÖ PASSED' if imports_ok else '‚ùå FAILED'}")
    print(f"Basic Functionality:   {'‚úÖ PASSED' if functionality_ok else '‚ùå FAILED'}")
    
    if imports_ok and functionality_ok:
        print("\nüéâ Enhanced security system is working correctly!")
        print("üîê Ready for production deployment!")
    else:
        print("\n‚ö†Ô∏è  Enhanced security validation failed.")
    
    return imports_ok and functionality_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)